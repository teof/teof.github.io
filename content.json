{"meta":{"title":"teof的博客","subtitle":"不想继续废柴","description":"北航09级研究生。擅长手游研发，历任双端核心开发、项目主程、创业公司技术合伙人。","author":"teof","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"你好,Hexo","slug":"你好-Hexo","date":"2018-11-16T15:19:56.000Z","updated":"2018-11-17T06:27:45.693Z","comments":true,"path":"2018/11/16/你好-Hexo/","link":"","permalink":"http://yoursite.com/2018/11/16/你好-Hexo/","excerpt":"","text":"从WordPress转到Hexo。写一篇博客吧，内容想了想，写个erlang通用服务器。 erlang的魔力：生成一套可替换的通用服务器框架。可以把机房全部署上，然后使用你的计算服务，例如挖比特币。即可一直工作，呵呵。注意：还可以进行热更新不停服替换新的计算服务。所有功能仅需40行代码，如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243-module(test).-export([common_server/0, factorial_server/0, become/1, test/1]).%通用服务器common_server() -&gt; receive &#123;become, F&#125; -&gt; case get(s_server) of undefined -&gt; nil; OldPid -&gt; OldPid ! &#123;close&#125; end, Pid = spawn(fun () -&gt; F() end), put(s_server, Pid), common_server(); OtherData -&gt; case get(s_server) of undefined -&gt; nil; OldPid -&gt; OldPid ! OtherData end, end.%可替换的计算服务器factorial_server() -&gt; receive &#123;From, N&#125; -&gt; From ! factorial(N), factorial_server(); &#123;close&#125; -&gt; close end.factorial(0) -&gt; 1; factorial(N) -&gt; N * factorial(N-1).become(F) -&gt; Pid = spawn(fun common_server/0), Pid ! &#123;become, F&#125;, Pid.test(Pid) -&gt; Pid ! &#123;self(), 50&#125;, receive X -&gt; X end. 测试：12341&gt; Pid = test:become(fun test:factorial_server/0).&lt;0.36.0&gt;2&gt; test:test(Pid).30414093201713378043612608166064768844377641568960512000000000000","categories":[{"name":"erlang","slug":"erlang","permalink":"http://yoursite.com/categories/erlang/"}],"tags":[]},{"title":"leetcode 84 柱状图中最大的矩形","slug":"leetcode-84-e6-9f-b1-e7-8a-b6-e5-9b-be-e4-b8-ad-e6-9c-80-e5-a4-a7-e7-9a-84-e7-9f-a9-e5-bd-a2","date":"2018-11-14T15:16:10.000Z","updated":"2018-11-17T03:50:11.587Z","comments":true,"path":"2018/11/14/leetcode-84-e6-9f-b1-e7-8a-b6-e5-9b-be-e4-b8-ad-e6-9c-80-e5-a4-a7-e7-9a-84-e7-9f-a9-e5-bd-a2/","link":"","permalink":"http://yoursite.com/2018/11/14/leetcode-84-e6-9f-b1-e7-8a-b6-e5-9b-be-e4-b8-ad-e6-9c-80-e5-a4-a7-e7-9a-84-e7-9f-a9-e5-bd-a2/","excerpt":"","text":"最近属地问了我一个面试题，说他想到了O（n*n）的时间复杂度，没通过。跟我提了一嘴O(n)复杂度，突然灵感来了。题目如下： https://leetcode-cn.com/problems/largest-rectangle-in-histogram/description/ 精神上来说可能有点像KMP算法。就是计算的过程中不断回溯，来最大利用旧的值，只是这个栈是用来保证是一个单调递增的。排版有点混乱，见谅。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;html&gt;&lt;body&gt;&lt;Script Language=\"JavaScript\"&gt; function Stack() &#123; this.dataStore = [] this.top = 0; this.push = push this.pop = pop this.peek = peek this.length = length; &#125; function push(element) &#123; this.dataStore[this.top++] = element; &#125; function peek(element) &#123; return this.dataStore[this.top - 1]; &#125; function pop() &#123; return this.dataStore[--this.top]; &#125; function clear() &#123; this.top = 0 &#125;function length() &#123; return this.top &#125; function test() &#123; // var shudi = new Array(2, 1, 5, 6, 2, 3, 0); // var shudi = new Array(2, 2, 1, 2, 2, 0); // var shudi = new Array(1, 2, 3, 4, 5, 6, 0); var shudi = new Array(6, 5, 4, 3, 2, 1, 0); var s = new Stack(); var i = 0; var max_value = 0; while (i &lt; shudi.length) &#123; if (s.length() == 0 || shudi[s.peek()] &lt;= shudi[i]) &#123; s.push(i); i += 1; &#125; else &#123; now_idx = s.pop(); if (s.length() == 0) max_value = Math.max(max_value, i - shudi[now_idx]); else max_value = Math.max(max_value, (i - s.peek() - 1) - shudi[now_idx]); &#125; &#125; return max_value &#125; alert(test()) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"h5刷题","slug":"h5刷题","permalink":"http://yoursite.com/categories/h5刷题/"}],"tags":[]},{"title":"好久没写了，继续加油","slug":"e5-a5-bd-e4-b9-85-e6-b2-a1-e5-86-99-e4-ba-86-ef-bc-8c-e7-bb-a7-e7-bb-ad-e5-8a-a0-e6-b2-b9","date":"2018-11-06T15:17:08.000Z","updated":"2018-11-17T03:44:14.572Z","comments":true,"path":"2018/11/06/e5-a5-bd-e4-b9-85-e6-b2-a1-e5-86-99-e4-ba-86-ef-bc-8c-e7-bb-a7-e7-bb-ad-e5-8a-a0-e6-b2-b9/","link":"","permalink":"http://yoursite.com/2018/11/06/e5-a5-bd-e4-b9-85-e6-b2-a1-e5-86-99-e4-ba-86-ef-bc-8c-e7-bb-a7-e7-bb-ad-e5-8a-a0-e6-b2-b9/","excerpt":"","text":"​ 这一段时间没写，和偷懒的关系不大，主要是工作和生活上各种繁忙。前一段负债良多，不得不在周末接了两天的私活，盈利3k+。呵呵，很轻松，如果上班赚钱也这么轻松就美滋滋了。 ​ 最近在公司主要负责三个方向。 ​ 首先是新的主打项目的后端难点开发，其实也没啥难点，呵呵。另外就是因为合作的新同事对于规范和接口很是严谨，不得不一直完善细节方便调用。 ​ 第二个就是前端人手不足，让我去帮忙开发unity3d的系统，基于之前的经验，帮他们弄了几个新点子。策划拼UI；Lua struct；前端自测协议（这个最有趣，前端推后端，后端推前端，呵呵），但是我的目的达到了，现在是个人都能帮后端测协议测功能。 ​ 第三个就是Egret，之前靠谱同事离职去深圳了，我凑合着接。typescript这个语言还挺有趣的，设计者既想奔着C#、Lua等各种现代先进语言的高大上走，又不得不背着js的重重的壳。希望后续自己能有更多时间写这方面的博客。细节是不可能分析的了，捡些重要的写写吧。 ​ 下一阶段要做好几个团队内技术分享，因为没时间好好准备，只能大概说个意思满足下他们了。","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://yoursite.com/categories/Uncategorized/"}],"tags":[]},{"title":"帆叔牛逼","slug":"e5-b8-86-e5-8f-94-e7-89-9b-e9-80-bc","date":"2018-07-06T16:47:59.000Z","updated":"2018-11-17T03:45:20.301Z","comments":true,"path":"2018/07/07/e5-b8-86-e5-8f-94-e7-89-9b-e9-80-bc/","link":"","permalink":"http://yoursite.com/2018/07/07/e5-b8-86-e5-8f-94-e7-89-9b-e9-80-bc/","excerpt":"","text":"​ 今天和格斗猎人的两位领导一起吃饭聚聚，瞎扯到了9点多。帆叔真是令人佩服，对代码的热爱实在让我钦佩，奋战在第一线。每天从早9点码到晚10点，中间甚至还会因为工作的聚精会神忘记了吃饭：） ​ 不由得回想起来当年和帆叔一起写代码的日子。那是真正的无视各种饭桶、杂毛，专注于设计代码底层的日子。各种交流，设计，思考，研究，并非空谈，而是都作用于实际的项目上。我也在这中间锻炼了不少领导方式方法。带领研究小组一周突击9/11/6。 ​ 现在帆叔去写引擎去了，我也好想去啊啊啊啊啊！！！！！！已经好久没提高自己的纯技术能力了。好想跟着帆叔继续，郁闷了。现在的琐事让我颓废了很久。不行不行，得想办法找回状态，今天果断和老板申请了新项目h5的前端身份。争取在新的领域给公司打好底子，解决一切难题。 当你老是在旧的领域，没什么挑战的时候，就很容易混日子。新的日子，好好干，早日成为egret扛把子，向帆叔学习，能达到架构和实现简单引擎的水平！ ​ 上周末看了前任3，思绪颇多，enjoy the life。 ​ 摘录《体面》的歌评： 版权归作者所有，任何形式转载请联系作者。 作者：抓住夏日的尾巴（来自豆瓣） 来源：https://music.douban.com/review/9382019/ ​ 《体面》这首歌，歌词写的非常好，大概表达的就是这样一个意思。“都已成年，不拖不欠，浪费时间，是我甘愿”“我爱你不后悔，也尊重故事结尾”“我爱过你，利落干脆”。 从我爱你，到我爱过你，令人唏嘘。我很欣赏这首歌的歌词里面的态度，以前的是是非非都已成过往，我付出多少都是心甘情愿，我流泪我心痛也是我的事，与你无关。分开的时候彼此体面一点，余生不再需要你的指教，无论有多少不甘不舍也都从此与你无关，那些我的情绪我会自己消化。再见，不负遇见。 总有人把天长地久挂在嘴边，可是能够白头偕老又有多少，这漫漫人生路能遇到一个可以相扶走到终点的人不容易，而路途中更多的人都只是与你携手走了一段路，他们可能会带来亲情、友情、爱情。而路上的那段经历，便成了珍贵的回忆。无论怎样，那都是自己所经历过的，都是人生的财富。 于文文声音有些粗，配上这个曲子，有一种声嘶力竭的沙哑感，就像是分手之后歇斯底里过后冷静并释然的感觉，很让人入戏。 从此以后，桥归桥，路归路，余生不复相见。我留给你的，是一个体面的背影；你留给我的，是过往的经历。","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://yoursite.com/categories/Uncategorized/"}],"tags":[]},{"title":"微信小游戏支付接入","slug":"e5-be-ae-e4-bf-a1-e5-b0-8f-e6-b8-b8-e6-88-8f-e6-94-af-e4-bb-98-e6-8e-a5-e5-85-a5","date":"2018-07-04T15:48:58.000Z","updated":"2018-11-16T16:06:02.025Z","comments":true,"path":"2018/07/04/e5-be-ae-e4-bf-a1-e5-b0-8f-e6-b8-b8-e6-88-8f-e6-94-af-e4-bb-98-e6-8e-a5-e5-85-a5/","link":"","permalink":"http://yoursite.com/2018/07/04/e5-be-ae-e4-bf-a1-e5-b0-8f-e6-b8-b8-e6-88-8f-e6-94-af-e4-bb-98-e6-8e-a5-e5-85-a5/","excerpt":"","text":"项目赶进度，今天帮后端同事接入微信小游戏的支付。下午花了俩小时确定了小程序支付的流程，告诉了前端下一步怎么做，用什么接口。吃晚饭的时候还琢磨着能不能一两天搞定。 晚上回到公司加班得到前端给来的震惊消息。原来那个接口不存在，查询报错的时候发现我错误的使用了小程序那一套的微信支付接入。应该是要用米大师虚拟支付来接。。。 第一反应当然是遍历官网相关资料，结果发现还真是。这尼玛不得不吐槽腾讯的分类，一下午的各种支付文档扫描、申请资料的时候真没发现和米大师虚拟支付有啥关系。新的支付套路晚上加班走起~~~结果呵呵哒。文档有多套，然后流程是来来回回，卡住了就回到前一套去理解。。。。。。走之前还行，看的马马虎虎，阿弥托福。 过程中还发生了一件趣事。设置操作密码，恩，输入了英文和数字，ok。然后，然后，在最后面输入操作密码确定xx操作的权限时，提示我操作密码不正确，被前端拦截了，呵呵，两个地方的检验方法不一致。。。只得重置密码，老板各种扫码以后，finish。。。呵呵。 另外Erlang的Otp20.3版本的ssl源码库有bug，影响了接入。升级到最新版本即可。让我回想起来了当年Erlang的R15A有史诗级的大bug，当时我修都修不过来，只能回退版本。现在去http://www.erlang.org/downloads一看，发现下架了这个版本。呵呵~","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://yoursite.com/categories/Uncategorized/"}],"tags":[]},{"title":"新项目进展","slug":"e6-96-b0-e9-a1-b9-e7-9b-ae-e8-bf-9b-e5-b1-95","date":"2018-06-29T15:36:49.000Z","updated":"2018-11-16T16:06:02.025Z","comments":true,"path":"2018/06/29/e6-96-b0-e9-a1-b9-e7-9b-ae-e8-bf-9b-e5-b1-95/","link":"","permalink":"http://yoursite.com/2018/06/29/e6-96-b0-e9-a1-b9-e7-9b-ae-e8-bf-9b-e5-b1-95/","excerpt":"","text":"过去的一周开发大圣的转职系统，下周上线，体力活。同时构思了新项目的计划。 1、利用现有同事的研究，网络和配置用老一套。 2、确定项目架构，分为战斗和系统，其中战斗的帧同步逻辑部分抽离出来，适配egret的表现层。系统层使用MVC没什么可讨论的，目标尽可能的简单直接，最好把相关手工复合部分都抽离出来，能让策划制作页面最好。系统之间保证绝对的独立性，低耦合。确定好公共模块。注意做好优化！项目优化上，本人观点一直是把通用的优化做好，而细节的优化不用刻意提前，分清主次。 3、项目编码规范初版已经定好，接下来在确定好架构的情况下，把文件夹定义好，模块间的管理规划好，重要文件注释写好，流程图画好。就可进入铺量环节，以方便让其他同事顺利上手。 4、h5是公司新的技术方向，坑肯定会不少，一边摸索解决一边定好方案和文档，为以后的项目搭好底子。 原则：一流的执行力，在创业公司加快推进，尽快上线。","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://yoursite.com/categories/Uncategorized/"}],"tags":[]},{"title":"公司新的个人创新型项目","slug":"e5-85-ac-e5-8f-b8-e6-96-b0-e7-9a-84-e4-b8-aa-e4-ba-ba-e5-88-9b-e6-96-b0-e5-9e-8b-e9-a1-b9-e7-9b-ae","date":"2018-06-21T15:44:38.000Z","updated":"2018-11-17T03:43:15.621Z","comments":true,"path":"2018/06/21/e5-85-ac-e5-8f-b8-e6-96-b0-e7-9a-84-e4-b8-aa-e4-ba-ba-e5-88-9b-e6-96-b0-e5-9e-8b-e9-a1-b9-e7-9b-ae/","link":"","permalink":"http://yoursite.com/2018/06/21/e5-85-ac-e5-8f-b8-e6-96-b0-e7-9a-84-e4-b8-aa-e4-ba-ba-e5-88-9b-e6-96-b0-e5-9e-8b-e9-a1-b9-e7-9b-ae/","excerpt":"","text":"​ 最近，和老板沟通，计划把我的时间从琐碎的开发和维护中抽离出来，负责公司更加通用的技术构架和难点攻坚，有空闲的时间就负责一个比较新颖的h5小游戏项目。 ​ 新的项目打算采用帧同步的策略，强调战前和养成策略，强调随机性，弱化战中操作/策略。如果做出来成功上线应该是一个普通玩家喜欢的轻中度游戏。争取做的好玩，萌萌的，不氪金（这点我是不会公然强调的，毕竟国内游戏圈敢说不氪金别人就敢让你上不了线） 团队成员暂时只有我和一个还没开窍刚入行的年轻人，真苦逼，每次都是全带萌新。 近期没脑力刷题。当了三年cto，各种打杂，技术没啥成长，全是get挫折经验了。。。 ​ 如果项目有进展，我也许会坚持更新。","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://yoursite.com/categories/Uncategorized/"}],"tags":[]},{"title":"麻将起手13张，总共有多少种组合可能？","slug":"e9-ba-bb-e5-b0-86-e8-b5-b7-e6-89-8b13-e5-bc-a0-ef-bc-8c-e6-80-bb-e5-85-b1-e6-9c-89-e5-a4-9a-e5-b0-91-e7-a7-8d-e7-bb-84-e5-90-88-e5-8f-af-e8-83-bd-ef-bc-9f","date":"2018-06-20T16:21:51.000Z","updated":"2018-11-17T04:12:25.406Z","comments":true,"path":"2018/06/21/e9-ba-bb-e5-b0-86-e8-b5-b7-e6-89-8b13-e5-bc-a0-ef-bc-8c-e6-80-bb-e5-85-b1-e6-9c-89-e5-a4-9a-e5-b0-91-e7-a7-8d-e7-bb-84-e5-90-88-e5-8f-af-e8-83-bd-ef-bc-9f/","link":"","permalink":"http://yoursite.com/2018/06/21/e9-ba-bb-e5-b0-86-e8-b5-b7-e6-89-8b13-e5-bc-a0-ef-bc-8c-e6-80-bb-e5-85-b1-e6-9c-89-e5-a4-9a-e5-b0-91-e7-a7-8d-e7-bb-84-e5-90-88-e5-8f-af-e8-83-bd-ef-bc-9f/","excerpt":"","text":"​ 今天前同事在群里面问了这个面试题。组合排列好多年没用过，忘得差不多了。正好练习下。 ​ 先介绍“挡板法”：是往正整数之间塞东西，比如x+y+z=13，其中x,y,z都大于0。解就是 准备13个1，和两个隔板，插入到13个1中，共计有12个可插入位置。c(12,2)=66。第一个隔板之前是x,第一个隔板和第二个隔板之间是y，最后面是z。 麻将总共是（筒、饼、条）3_4_9=108张。 ​ 思路: 利用挡板法，x1+x2+x3+…+x27=13。其中0&lt;=xi&lt;=4.将每个xi都加1.则为求x1+x2+x3+…+x27=40。其中1=xi&lt;=5.的解 ​ 先忽略xi&lt;=5的限制，则全解为c(40-1,27-1)=c(39,26). 现在要减去xi&lt;=5限制的数量，其值为 1). 有一个xi&gt;5: 假设为x1&gt;5,则为(x1-5)+x2+x3+…+x27=40-5. 此时挡板法可得解为c(35-1,27-1), 因为x1…x27都有该解，所以组合数为c(27,1) * c(35-1,27-1). 2). 有两个xi,xj&gt;5:假设为x1&gt;5,x2&gt;5,则为(x1-5)+(x2-5)+x3+…+x27=40-5-5. ​ 此时挡板法可得解为c(30-1,27-1), 因为x1…x27中任两个都有该解，所以组合数为c(27,2) c(30-1,27-1). 因为每个1)的情况都包含有两个2)的解，所以要去重一个，即最终解为c(39,26) - (c(27,1) c(35-1,27-1) - c(27,2) * c(30-1,27-1)) = 98521596000. 经同事群验证，该答案正确。 ​ PS： 回想起来了之前和其他项目组讨论麻将的胡牌算法。是利用了解空间树的深度遍历算法来确定是否胡牌以及胡什么牌。有个同事提出来了所谓更加先进的想法，好像是基于深度遍历的优化的（根据子树直接得出部分结果来优化遍历）。详情不记得了。","categories":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/categories/算法/"}],"tags":[]},{"title":"1010-1014","slug":"1010-1014","date":"2018-06-20T15:55:56.000Z","updated":"2018-11-16T16:06:02.025Z","comments":true,"path":"2018/06/20/1010-1014/","link":"","permalink":"http://yoursite.com/2018/06/20/1010-1014/","excerpt":"","text":"最近很忙。 10.【编程题】 月饼 (25)题目描述 月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需 求量，请你计算可以获得的最大收益是多少。 注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有3种月饼，其库存量分别为18、15、10万吨，总售价分别为75、 72、45亿元。如果市场的最大需求量只有20万吨，那么我们最大收益策略应该是卖出全部15万吨第2种月饼、以及5万吨第3种月饼，获得 72 + 45/2 = 94.5（亿元）。 输入描述: 每个输入包含1个测试用例。每个测试用例先给出一个不超过1000的正整数N表示月饼的种类数、以及不超过500（以万吨为单位）的正整数 D表示市场最大需求量。随后一行给出N个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出N个正数表示每种月饼的总售价（以亿 元为单位）。数字间以空格分隔。 输出描述: 对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后2位。 输入例子: 3 20 18 15 10 75 72 45 输出例子: 94.50 代码如下： var line1 = readline(); var line2 = readline(); var line3 = readline(); var lines1 = line1.split(&apos; &apos;); var category = lines1[0]; var d = lines1[1]; var lines2 = line2.split(&apos; &apos;); var lines2_int = lines2.map(function (item,index,input) { return parseInt(item); }) var lines3 = line3.split(&apos; &apos;); var lines3_int = lines3.map(function (item,index,input) { return parseInt(item); }) var ratio = new Array(); //单价比 for(var i = 0; i &lt; category; i++) { var max_save = lines2_int[i]; var all_price = lines3_int[i]; ratio.push([i, all_price / max_save]); } var compare = function (x, y) { if(x[1] &gt; y[1]) return -1; return 1; } ratio.sort(compare); var result = 0; for(var i = 0; i &lt; category; i++) { var idx = ratio[i][0]; var r = ratio[i][1]; if(d &lt;= lines2_int[idx]) { result += r * d; break; } d -= lines2_int[idx]; result += lines3_int[idx]; } function toDecimal2(x) { var f = parseFloat(x); var f = Math.round(x*100)/100; var s = f.toString(); var rs = s.indexOf(&apos;.&apos;); if (rs &lt; 0) { rs = s.length; s += &apos;.&apos;; } while (s.length &lt;= rs + 2) { s += &apos;0&apos;; } return s; } console.log(toDecimal2(result)); 11.【编程题】 个位数统计 (15)题目描述 给定一个k位整数N = dk-1*10k-1 + ... + d1*101 + d0 (0&lt;=di&lt;=9, i=0,...,k-1, dk-1&gt;0)，请编写程序统计每种不同的个位数字出现的次数。例如：给定N = 100311，则有2个0，3个1，和1个3。 输入描述: 每个输入包含1个测试用例，即一个不超过1000位的正整数N。 输出描述: 对N中每一种不同的个位数字，以D:M的格式在一行中输出该位数字D及其在N中出现的次数M。要求按D的升序输出。 输入例子: 100311 输出例子: 0:2 1:3 3:1 代码如下： var line = readline(); var stats = new Array(); var value = 0; for(var i = 0; i &lt; line.length; i++) { value = parseInt(line[i]); if(stats[value] !== undefined) stats[value] = stats[value] + 1; else stats[value] = 1; } for(i = 0; i &lt; stats.length; i++) { if(stats[i] == undefined) continue; console.log(i + &quot;:&quot; + stats[i]); } 12.【编程题】 D进制的A+B (20)题目描述 输入两个非负10进制整数A和B(&lt;=230-1)，输出A+B的D (1 &lt; D &lt;= 10)进制数。 输入描述: 输入在一行中依次给出3个整数A、B和D。 输出描述: 输出A+B的D进制数。 输入例子: 123 456 8 输出例子: 1103 代码如下： var line = readline(); var lines = line.split(&apos; &apos;); var a = parseInt(lines[0]); var b = parseInt(lines[1]); var d = parseInt(lines[2]); var sum = a + b; var str = (a + b).toString(); var result = &quot;&quot;; var acc = d; var cnt = 1; while (true) { if(acc &gt; (a+b)) break; cnt++; acc *= d; } for(var i = cnt; i &gt;= 0; i--) { var base = Math.pow(d, i); if(sum &gt;= base) { result += Math.floor(sum / base); sum = sum % base; } else { if(result == &quot;&quot;) continue; result += 0; } } console.log(result); 13.【编程题】 组个最小数 (20)题目描述 给定数字0-9各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意0不能做首位）。例如： 给定两个0，两个1，三个5，一个8，我们得到的最小的数就是10015558。 现给定数字，请编写程序输出能够组成的最小的数。 输入描述: 每个输入包含1个测试用例。每个测试用例在一行中给出10个非负整数，顺序表示我们拥有数字0、数字1、……数字9的个数。整数间用一个空 格分隔。10个数字的总个数不超过50，且至少拥有1个非0的数字。 输出描述: 在一行中输出能够组成的最小的数。 输入例子: 2 2 0 0 0 3 0 0 1 0 输出例子: 10015558 代码如下： var line = readline(); var lines = line.split(&apos; &apos;); var lines_int = lines.map(function(item, index,input){ return input[index] = parseInt(item);}) var nums = new Array(); for(var i = 0; i &lt; lines.length; i++) { nums[i] = lines[i]; } function repeat_str(str, num) { if(num &lt;= 0) return &quot;&quot;; return str.toString().repeat(num); } var result = &quot;&quot;; for(var i = 1; i &lt; lines_int.length; i++) { if(lines_int[i] == 0) continue; if(result == &quot;&quot;) { result = i + repeat_str(0, lines_int[0]) + repeat_str(i, lines_int[i] - 1); } else { result += repeat_str(i, lines_int[i]); } } console.log(result); 14.【编程题】 科学计数法 (20)题目描述 科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式[+-][1-9]&quot;.&quot;[0-9]+E[+-][0-9]+，即数字的整数部分 只有1位，小数部分至少有1位，该数字及其指数部分的正负号即使对正数也必定明确给出。 现以科学计数法的格式给出实数A，请编写程序按普通数字表示法输出A，并保证所有有效位都被保留。 输入描述: 每个输入包含1个测试用例，即一个以科学计数法表示的实数A。该数字的存储长度不超过9999字节，且其指数的绝对值不超过9999。 输出描述: 对每个测试用例，在一行中按普通数字表示法输出A，并保证所有有效位都被保留，包括末尾的0。 输入例子: +1.23400E-03 输出例子: 0.00123400 代码如下： var line = readline(); var pow = &quot;&quot;; var base_str = &quot;&quot;; var result = &quot;&quot;; for(var i = 1; i &lt; line.length; i++) { if(line[i] !== &quot;E&quot;) { base_str += line[i]; continue; } var pow_str = line.slice(i+1, line.length); var pow_int = parseInt(pow_str); if(pow_int == 0) { result = base_str; break; } if(pow_int &gt; 0) { result = base_str[0]; var cnt = 1; while (pow_int &gt; 0) { if(cnt + 1 &lt; base_str.length) { result += base_str[cnt + 1]; cnt++; pow_int--; } else { result += &apos;0&apos;.repeat(pow_int); break; } } } else { result = &quot;0.&quot; + &apos;0&apos;.repeat(-pow_int-1) + base_str[0] + base_str.slice(2, base_str.length); } break; } if(line[0] == &quot;-&quot;) result = &quot;-&quot; + result; console.log(result);","categories":[{"name":"js刷题","slug":"js刷题","permalink":"http://yoursite.com/categories/js刷题/"}],"tags":[]},{"title":"1006-1009","slug":"1006-1009","date":"2018-06-14T12:25:22.000Z","updated":"2018-11-16T16:06:02.025Z","comments":true,"path":"2018/06/14/1006-1009/","link":"","permalink":"http://yoursite.com/2018/06/14/1006-1009/","excerpt":"","text":"6.【编程题】部分A+B (15)题目描述 正整数A的“DA（为1位整数）部分”定义为由A中所有DA组成的新整数PA。例如：给定A = 3862767，DA = 6，则A的“6部分”PA是66，因为A中有2个6。 现给定A、DA、B、DB，请编写程序计算PA + PB。 输入描述: 输入在一行中依次给出A、DA、B、DB，中间以空格分隔，其中0 &lt; A, B &lt; 1010。 输出描述: 在一行中输出PA + PB的值。 输入例子: 3862767 6 13530293 3 输出例子: 399 代码如下： var line = readline(); var lines = line.split(&apos; &apos;); var a = parseInt(lines[0]); var da = parseInt(lines[1]); var b = parseInt(lines[2]); var db = parseInt(lines[3]); var cnta = 0; var cntb = 0; while (a != 0) { if((a % 10) == da) cnta = cnta * 10 + (a % 10); a = Math.floor(a / 10); } while (b != 0) { if((b % 10) == db) cntb = cntb * 10 + (b % 10); b = Math.floor(b / 10); } console.log(cnta + cntb); 7.【编程题】 A除以B (20)题目描述 本题要求计算A/B，其中A是不超过1000位的正整数，B是1位正整数。你需要输出商数Q和余数R，使得A = B * Q + R成立。 输入描述: 输入在1行中依次给出A和B，中间以1空格分隔。 输出描述: 在1行中依次输出Q和R，中间以1空格分隔。 输入例子: 123456789050987654321 7 输出例子: 17636684150141093474 3 代码如下： //大整数除法(除数为小整数。如果除数也是大整数的话，需要用字符串的表达形式来处理相关逻辑了，本质是一样的，都是模拟除法公式） var line = readline(); var lines = line.split(&apos; &apos;); var a = lines[0]; var b = parseInt(lines[1]); var sum = 0; var n = 0; var result = &quot;&quot;; for(var i = 0; i &lt; a.length; i++) { var n = a.charCodeAt(i) - 48; //得到数字 sum = sum * 10 + n; if(sum &gt;= b) { result += Math.floor(sum / b); sum = sum % b; } else { if(result == &quot;&quot;) continue; result += 0; } } console.log(result, sum); 8.【编程题】 锤子剪刀布 (20)题目描述 大家应该都会玩“锤子剪刀布”的游戏： 现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。 输入描述: 输入第1行给出正整数N（&lt;=105），即双方交锋的次数。随后N行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。C代表“锤子”、J代表“剪刀”、B代 表“布”，第1个字母代表甲方，第2个代表乙方，中间有1个空格。 输出描述: 输出第1、2行分别给出甲、乙的胜、平、负次数，数字间以1个空格分隔。第3行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有1个空格。如果解不唯 一，则输出按字母序最小的解。 输入例子: 10 C J J B C B B B B C C C C B J B B C J J 输出例子: 5 3 2 2 3 5 B B 代码如下： var head_line = readline(); var a_win = 0; var draw = 0; var a_lose = 0; var a_win_array = {&quot;C&quot;:0, &quot;J&quot;:0, &quot;B&quot;:0}; var b_win_array = {&quot;C&quot;:0, &quot;J&quot;:0, &quot;B&quot;:0}; var result = &quot;&quot;; //返回0表示平局，1表示a赢，-1表示a输 var judgeWin = function(ap, bp) { if(ap == bp) return 0; if(ap == &quot;C&quot; &amp;&amp; bp == &quot;J&quot;) return 1; if(ap == &quot;J&quot; &amp;&amp; bp == &quot;B&quot;) return 1; if(ap == &quot;B&quot; &amp;&amp; bp == &quot;C&quot;) return 1; return -1; } while(line=readline()) { var lines = line.split(&apos; &apos;); var a = lines[0]; var b = lines[1]; switch(judgeWin(a, b)) { case 0: draw ++; break; case 1: a_win ++; a_win_array[a] = a_win_array[a] + 1; break; case -1: a_lose ++; b_win_array[b] = b_win_array[b] + 1; break; } } console.log(a_win, draw, a_lose); console.log(a_lose, draw, a_win); var str = &quot;&quot;; if(a_win_array[&quot;B&quot;] &gt;= a_win_array[&quot;J&quot;] &amp;&amp; a_win_array[&quot;B&quot;] &gt;= a_win_array[&quot;C&quot;]) str += &quot;B&quot;; else if(a_win_array[&quot;C&quot;] &gt;= a_win_array[&quot;B&quot;] &amp;&amp; a_win_array[&quot;C&quot;] &gt;= a_win_array[&quot;J&quot;]) str += &quot;C&quot;; else str += &quot;J&quot;; if(b_win_array[&quot;B&quot;] &gt;= b_win_array[&quot;J&quot;] &amp;&amp; b_win_array[&quot;B&quot;] &gt;= b_win_array[&quot;C&quot;]) str += &quot; B&quot;; else if(b_win_array[&quot;C&quot;] &gt;= b_win_array[&quot;B&quot;] &amp;&amp; b_win_array[&quot;C&quot;] &gt;= b_win_array[&quot;J&quot;]) str += &quot; C&quot;; else str += &quot; J&quot;; console.log(str); 9.【编程题】 数字黑洞 (20)题目描述 给定任一个各位数字不完全相同的4位正整数，如果我们先把4个数字按非递增排序，再按非递减排序，然后用第1个数字减第2个数字，将得到 一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的6174，这个神奇的数字也叫Kaprekar常数。 例如，我们从6767开始，将得到 7766 - 6677 = 1089 9810 - 0189 = 9621 9621 - 1269 = 8352 8532 - 2358 = 6174 7641 - 1467 = 6174 ... ... 现给定任意4位正整数，请编写程序演示到达黑洞的过程。 输入描述: 输入给出一个(0, 10000)区间内的正整数N。 输出描述: 如果N的4位数字全相等，则在一行内输出“N - N = 0000”；否则将计算的每一步在一行内输出，直到6174作为差出现，输出格式见样例,每行中间没有空行。注意每个数字按4位数格 式输出。 输入例子: 6767 输出例子: 7766 - 6677 = 1089 9810 - 0189 = 9621 9621 - 1269 = 8352 8532 - 2358 = 6174 代码如下： //有些特殊情况没有注意或者题目就没有说清.此处已通.以代码为准即可知道潜规则 var line = readline(); line = &apos;0&apos;.repeat(4 - line.length) + line; var all_same = true; for(var i = 1; i &lt; line.length; i++) { if(line[i] == line[0]) continue; all_same = false; break; } if(all_same) { console.log(line + &quot; - &quot; + line + &quot; = 0000&quot;); } else { var num = parseInt(line); var num_array = new Array(0, 0, 0, 0); var result = 0; var array_idx = 0; //source_int输入的整数，pos_num需要占据的非小数的位置，比如4，则数字1需要变成0001进行返回 var format = function (source_int, pos_num) { if (pos_num == undefined) pos_num = 4; source_str = source_int.toString(); if (source_str.length &gt;= pos_num) return source_str; return &apos;0&apos;.repeat(pos_num - source_str.length) + source_str; } var ascnum = 0; var desnum = 0; while (true) { while (num != 0) { num_array[array_idx] = num % 10; num = Math.floor(num / 10); array_idx++; } array_idx = 0; num_array = num_array.sort(); ascnum = num_array[3] * 1000 + num_array[2] * 100 + num_array[1] * 10 + num_array[0]; desnum = num_array[0] * 1000 + num_array[1] * 100 + num_array[2] * 10 + num_array[3]; num = ascnum - desnum; console.log(format(ascnum) + &quot; - &quot; + format(desnum) + &quot; = &quot; + format(num)); if (num == 6174) break; } }","categories":[{"name":"js刷题","slug":"js刷题","permalink":"http://yoursite.com/categories/js刷题/"}],"tags":[]},{"title":"1004-1005","slug":"1004-1005","date":"2018-06-13T17:05:48.000Z","updated":"2018-11-16T16:06:02.025Z","comments":true,"path":"2018/06/14/1004-1005/","link":"","permalink":"http://yoursite.com/2018/06/14/1004-1005/","excerpt":"","text":"5.【编程题】福尔摩斯的约会 (20) 题目描述 大侦探福尔摩斯接到一张奇怪的字条：“我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&amp;hgsfdk d&amp;Hyscvnm”。大侦探很 快就明白了，字条上奇怪的乱码实际上就是约会的时间“星期四 14:04”，因为前面两字符串中第1对相同的大写英文字母（大小写有区分）是 第4个字母&apos;D&apos;，代表星期四；第2对相同的字符是&apos;E&apos;，那是第5个英文字母，代表一天里的第14个钟头（于是一天的0点到23点由数字0到9、 以及大写字母A到N表示）；后面两字符串第1对相同的英文字母&apos;s&apos;出现在第4个位置（从0开始计数）上，代表第4分钟。现给定两对字符串， 请帮助福尔摩斯解码得到约会的时间。 输入描述: 输入在4行中分别给出4个非空、不包含空格、且长度不超过60的字符串。 输出描述: 在一行中输出约会的时间，格式为“DAY HH:MM”，其中“DAY”是某星期的3字符缩写，即MON表示星期一，TUE表示星期二，WED表示星期三，THU表示星期 四，FRI表示星期五，SAT表示星期六，SUN表示星期日。题目输入保证每个测试存在唯一解。 输入例子: 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&amp;hgsfdk d&amp;Hyscvnm 输出例子: THU 14:04 代码如下： //字符转ascii码：用charCodeAt(); //ascii码砖字符：用fromCharCode(); //大写字母A 到Z 的值是从65 到90; //小写a到z 是从91 到 122; var line1 = readline(); var line2 = readline(); var line3 = readline(); var line4 = readline(); var min_length1 = Math.min(line1.length, line2.length); var min_length2 = Math.min(line3.length, line4.length); var results = new Array(undefined, undefined, undefined); var cnt = 0; for(var j = 0; j &lt; min_length1; j++) { if(line1[j] == line2[j] &amp;&amp; line1[j] &gt;= &apos;A&apos; &amp;&amp; line1[j] &lt;= &apos;Z&apos;) { if(results[0] == undefined) results[0] = line1[j]; } if(results[0] !== undefined &amp;&amp; line1[j] == line2[j] &amp;&amp; ((line1[j] &gt;= &apos;A&apos; &amp;&amp; line1[j] &lt;= &apos;Z&apos;) || (line1[j] &gt;= &apos;a&apos; &amp;&amp; line1[j] &lt;= &apos;z&apos;) || (line1[j] &gt;= &apos;0&apos; &amp;&amp; line1[j] &lt;= &apos;9&apos;))) { if(cnt == 1) results[1] = line1[j]; cnt++; } } for(var j = 0; j &lt; min_length2; j++) { if(line3[j] == line4[j] &amp;&amp; ((line3[j] &gt;= &apos;A&apos; &amp;&amp; line3[j] &lt;= &apos;Z&apos;) || (line3[j] &gt;= &apos;a&apos; &amp;&amp; line3[j] &lt;= &apos;z&apos;))) { results[2] = j; break; } } var str1 = &quot;&quot;; switch (results[0]) { case &apos;A&apos;: str1 += &quot;MON &quot;; break; case &apos;B&apos;: str1 += &quot;TUE &quot;; break; case &apos;C&apos;: str1 += &quot;WED &quot;; break; case &apos;D&apos;: str1 += &quot;THU &quot;; break; case &apos;E&apos;: str1 += &quot;FRI &quot;; break; case &apos;F&apos;: str1 += &quot;SAT &quot;; break; case &apos;G&apos;: str1 += &quot;SUN &quot;; break; } if(results[1] &gt;= &apos;A&apos; &amp;&amp; results[1] &lt;= &apos;N&apos;) { str1 += (results[1].charCodeAt(results[1]) - 65 + 10); } else if(results[1] &gt;= &apos;0&apos; &amp;&amp; results[1] &lt;= &apos;9&apos;) { str1 += &quot;0&quot; + results[1]; } if(results[2] &lt; 10) str1 += &quot;:0&quot; + results[2]; else str1 += &quot;:&quot; + results[2]; console.log(str1); 5.【编程题】德才论 (25) 题目描述 宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之 小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。” 现给出一批考生的德才分数，请根据司马光的理论给出录取排名。 输入描述: 输入第1行给出3个正整数，分别为：N（&lt;=105），即考生总数；L（&gt;=60），为录取最低分数线，即德分和才分均不低于L的考生才有资格 被考虑录取；H（&lt;100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到 但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于H，但是德分不低于才分的考生属于“才德兼 亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线L的考生也按总分排序，但排在第三类考生之后。 随后N行，每行给出一位考生的信息，包括：准考证号、德分、才分，其中准考证号为8位整数，德才分为区间[0, 100]内的整数。数字间以空格分隔。 输出描述: 输出第1行首先给出达到最低分数线的考生人数M，随后M行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人 总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。 输入例子: 14 60 80 10000001 64 90 10000002 90 60 10000011 85 80 10000003 85 80 10000004 80 85 10000005 82 77 10000006 83 76 10000007 90 78 10000008 75 79 10000009 59 90 10000010 88 45 10000012 80 100 10000013 90 99 10000014 66 60 输出例子: 12 10000013 90 99 10000012 80 100 10000003 85 80 10000011 85 80 10000004 80 85 10000007 90 78 10000006 83 76 10000005 82 77 10000002 90 60 10000014 66 60 10000008 75 79 10000001 64 90 代码如下： var head_line = readline(); var head_lines = head_line.split(&apos; &apos;); var all_num = parseInt(head_lines[0]); var low = parseInt(head_lines[1]); var high = parseInt(head_lines[2]); //四档考生，先分完档再在每档内按规则排序 var s1 = new Array(); var s2 = new Array(); var s3 = new Array(); var s4 = new Array(); while(line=readline()) { var lines = line.split(&apos; &apos;); var stu_no = parseInt(lines[0]); var score_de = parseInt(lines[1]); var score_cai = parseInt(lines[2]); if(score_de &lt; low || score_cai &lt; low) continue; if(score_de &gt;= high &amp;&amp; score_cai &gt;= high) { s1.push({stu_no, score_de, score_cai}); continue; } if(score_de &gt;= high &amp;&amp; score_cai &lt; high) { s2.push({stu_no, score_de, score_cai}); continue; } if(score_de &lt; high &amp;&amp; score_cai &lt; high &amp;&amp; score_de &gt;= score_cai) { s3.push({stu_no, score_de, score_cai}); continue; } s4.push({stu_no, score_de, score_cai}) } //同档权值相同以后的后续比较规则 var inner_rule = function ({stu_no1, score_de1, score_cai1}, {stu_no2, score_de2, score_cai2}) { if(score_de1 == score_de2) { if(stu_no1 &gt; stu_no2) return 1; else return -1 } else if(score_de1 &gt; score_de2) return -1; else return 1; } //考生的内部排序规则 var compare = function (x, y) { var stu_no1 = x[&quot;stu_no&quot;]; var score_de1 = x[&quot;score_de&quot;]; var score_cai1 = x[&quot;score_cai&quot;]; var stu_no2 = y[&quot;stu_no&quot;]; var score_de2 = y[&quot;score_de&quot;]; var score_cai2 = y[&quot;score_cai&quot;]; if (score_de1 + score_cai1 == score_de2 + score_cai2) { return inner_rule({stu_no1, score_de1, score_cai1}, {stu_no2, score_de2, score_cai2}); } else if (score_de1 + score_cai1 &gt; score_de2 + score_cai2) { return -1; } else { return 1; } } s1 = s1.sort(compare); s2 = s2.sort(compare); s3 = s3.sort(compare); s4 = s4.sort(compare); var result = s1.concat(s2); result = result.concat(s3); result = result.concat(s4); console.log(result.length); for(var i = 0; i &lt; result.length; i++) { console.log(result[i][&quot;stu_no&quot;] + &quot; &quot; + result[i][&quot;score_de&quot;] + &quot; &quot; + result[i][&quot;score_cai&quot;]) }","categories":[{"name":"js刷题","slug":"js刷题","permalink":"http://yoursite.com/categories/js刷题/"}],"tags":[]},{"title":"1000-1003","slug":"1000-1003","date":"2018-06-12T16:23:54.000Z","updated":"2018-11-17T03:41:42.051Z","comments":true,"path":"2018/06/13/1000-1003/","link":"","permalink":"http://yoursite.com/2018/06/13/1000-1003/","excerpt":"","text":"##刷题 JavaScript(V8.6.0.0) 题目网站：https://www.nowcoder.com/pat/6/problems 本人在nodejs环境下自测，你也可以选择 在线自测网站：http://www.webtoolkitonline.com/javascript-tester.html 美化/净化/加密/解密/混淆网站：https://tool.lu/js/ 作为js新人，书都还没看完。前两题一次秒过，试了试手，继续加油。 1.【编程题】a+b 问题描述： 计算a+b的和 每行包行两个整数a和b 对于每行输入对应输出一行a和b的和 输入 1 5 输出 6 代码如下： while(line=readline()){ var lines = line.split(&apos; &apos;); var a = parseInt(lines[0]); var b = parseInt(lines[1]); print(a+b); } 2.【编程题】A+B和C (15) 题目描述 给定区间[-2的31次方, 2的31次方]内的3个整数A、B和C，请判断A+B是否大于C。 输入描述: 输入第1行给出正整数T(&lt;=10)，是测试用例的个数。随后给出T组测试用例，每组占一行，顺序给出A、B和C。整数间以空格分隔。 输出描述: 对每组测试用例，在一行中输出“Case #X: true”如果A+B&gt;C，否则输出“Case #X: false”，其中X是测试用例的编号（从1开始）。 输入例子: 4 1 2 3 2 3 4 2147483647 0 2147483646 0 -2147483648 -2147483647 输出例子: Case #1: false Case #2: true Case #3: true Case #4: false 代码如下： var startNum = parseInt(readline()); var count = 1; while(line=readline()){ var lines = line.split(&apos; &apos;); var a = parseInt(lines[0]); var b = parseInt(lines[1]); var c = parseInt(lines[2]); print(&quot;Case #&quot; + count + &quot;: &quot; + (a + b &gt; c)); count ++; } 3.【编程题】数字分类 (20) 题目描述 给定一系列正整数，请按要求对数字进行分类，并输出以下5个数字： ​​ A1 = 能被5整除的数字中所有偶数的和； A2 = 将被5除后余1的数字按给出顺序进行交错求和，即计算n1-n2+n3-n4...； A3 = 被5除后余2的数字的个数； A4 = 被5除后余3的数字的平均数，精确到小数点后1位； A5 = 被5除后余4的数字中最大数字。 输入描述: 每个输入包含1个测试用例。每个测试用例先给出一个不超过1000的正整数N，随后给出N个不超过1000的待分类的正整数。数字间以空格分隔。 输出描述: 对给定的N个正整数，按题目要求计算A1~A5并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。 若其中某一类数字不存在，则在相应位置输出“N”。 输入例子: 13 1 2 3 4 5 6 7 8 9 10 20 16 18 输出例子: 30 11 2 9.7 9 代码如下： var line = readline(); var lines = line.split(&apos; &apos;); var num = parseInt(lines[0]); var a1_sum = &quot;N&quot;; var a2_sum = &quot;N&quot;; var a2_postive = true; //a2计算是否是正数，true取+，false取- var a3_cnt = &quot;N&quot;; var a4_sum = &quot;N&quot;; var a4_cnt = 0; var a5_max = &quot;N&quot;; var length = lines.length; for(var i = 1; i &lt; length; i++) { var value = parseInt(lines[i]); switch (value % 5) { case 0: if(value % 2 == 0) { if(a1_sum == &quot;N&quot;) a1_sum = value; else a1_sum += value; } break; case 1: if(a2_sum == &quot;N&quot;) a2_sum = 0; if(a2_postive) a2_sum += value; else a2_sum -= value; a2_postive = !a2_postive; break; case 2: if(a3_cnt == &quot;N&quot;) a3_cnt = 0; a3_cnt++; break; case 3: if(a4_sum == &quot;N&quot;) a4_sum = 0; a4_sum += value; a4_cnt++; break; case 4: if(a5_max == &quot;N&quot;) a5_max = value; else a5_max = Math.max(a5_max, value); break; } } //强制保留2额外小数，即527.0显示为527.0而不是527。 //如果不需要强制保留的话直接Math.round(x*100)/100;即可 function toDecimal2(x) { var f = parseFloat(x); var f = Math.round(x*10)/10; var s = f.toString(); var rs = s.indexOf(&apos;.&apos;); if (rs &lt; 0) { rs = s.length; s += &apos;.&apos;; } while (s.length &lt;= rs + 1) { s += &apos;0&apos;; } return s; } var a4_result = &quot;N&quot;; if(a4_sum !== &quot;N&quot;) a4_result = toDecimal2(a4_sum / a4_cnt); console.log(a1_sum + &quot; &quot; + a2_sum + &quot; &quot; + a3_cnt + &quot; &quot; + a4_result + &quot; &quot; + a5_max); 4.【编程题】数素数 (20) 题目描述 令Pi表示第i个素数。现任给两个正整数M &lt;= N &lt;= 10000，请输出PM到PN的所有素数。 ​ 输入描述: 输入在一行中给出M和N，其间以空格分隔。 输出描述: 输出从PM到PN的所有素数，每10个数字占1行，其间以空格分隔，但行末不得有多余空格。 输入例子: 5 27 输出例子: 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 代码如下： var line = readline(); var lines = line.split(&apos; &apos;); var m = parseInt(lines[0]); var n = parseInt(lines[1]); var results = new Array(); var idx = 0; var get_result = false; var cur_num = 2; while (!get_result) { if(judgePrime(cur_num)) { idx++; if (idx &gt;= m) results[results.length] = cur_num; if (idx == n) get_result = true; } cur_num ++; } //判断x是否为素数,只处理x为整数的情况 function judgePrime(x) { if(x &lt; 2) return false; for(var i = 2; i &lt;= Math.sqrt(x); i ++) { if ((x % i) == 0) return false; } return true; } var strline = &quot;&quot;; for(var j = 0; j &lt; results.length; j++) { if(j % 10 == 0) strline = results[j]; else strline += &quot; &quot; + results[j]; if(j % 10 == 9) { console.log(strline); strline = &quot;&quot;; } } if(strline !== &quot;&quot;) console.log(strline);","categories":[{"name":"js刷题","slug":"js刷题","permalink":"http://yoursite.com/categories/js刷题/"}],"tags":[]},{"title":"缅怀","slug":"e7-bc-85-e6-80-80","date":"2018-05-25T14:16:31.000Z","updated":"2018-11-16T16:06:02.025Z","comments":true,"path":"2018/05/25/e7-bc-85-e6-80-80/","link":"","permalink":"http://yoursite.com/2018/05/25/e7-bc-85-e6-80-80/","excerpt":"","text":"今天得到了一个很坏的消息。我的好拍档可能真的回不来了。我的悲伤弥漫到了全身，周围的人事环绕，仿佛完全没有在乎。这世界节奏太快，快到来不及祷告。 我在这思念着我的拍档，寄希望于最后的渺茫，就像能在梦里你回来了，开着玩笑，吃着炸鸡。 一位大牛，公司副总，和大伙有着这许多的情感交织，带来了无限的欢快。为什么呢，为什么呢。 我能理解这样的决定，因为我自己就曾设身处地于那个地步。我能走出来，家人和我的外号占据了大部分因素。我是小强，打不死的小强，越受挫会越激发我的努力。我真希望能分一点这样死皮赖脸的精神给你。。。 我想不通，想不通，多么希望你能够回来。也许是真的倦了，累了，不愿虚与委蛇这个世界。 兄弟，我哭了，我想你回来。相处的时光苦乐交织，未来仍会这样，但我在这里啊。 我会努力，带上你那一份对技术的热爱，继续生活。我的拍档，我的兄弟！","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://yoursite.com/categories/Uncategorized/"}],"tags":[]},{"title":"维护文档","slug":"e7-bb-b4-e6-8a-a4-e6-96-87-e6-a1-a3","date":"2018-05-11T16:32:27.000Z","updated":"2018-11-17T04:12:43.291Z","comments":true,"path":"2018/05/12/e7-bb-b4-e6-8a-a4-e6-96-87-e6-a1-a3/","link":"","permalink":"http://yoursite.com/2018/05/12/e7-bb-b4-e6-8a-a4-e6-96-87-e6-a1-a3/","excerpt":"","text":"[TOC] 附注：66专指内网发版机器，即192.168.1.66；中心后台特指外网中心后台，即 http://119.29.73.196/web/admin/index.php 1. 热更代码 进入66的发版目录，以v1.1.11为例，更新map_actor模块 # cd /data/game/ 找到对应版本号的目录，v1.1.11分支的Android和IOS分别是：android_main_55594_v1.1.11 和 ios_main_55594_v1.1.11 分别进入这两个目录的server目录下，执行map_actor模块同步到外网中心服模板机器 # cd /data/game/android_main_55594_v1.1.11/server # make release_android # ./scripts/unix/sync_file -u root -h 119.29.73.196 -s androids0 map_actor # cd /data/game/ios_main_55594_v1.1.11/server # make release_ios # ./scripts/unix/sync_file -u root -h 119.29.73.196 -s ioss0 map_actor 打开外网后台 http://119.29.73.196/web/admin/index.php 进入服务器管理。勾选【页面右上角】所有机器（除去中心后台机），点击同步代码 勾选所有要热更的服务器，点击【页面正上方】同步代码，然后将要热更的模块map_actor填入【热更代码：】文本框中，点击提交 2. 热更配置 进入66的发版目录，以v1.1.11为例，更新配置 # cd /data/game/ 找到对应版本号的目录，v1.1.11分支的Android和IOS分别是：android_main_55594_v1.1.11 和 ios_main_55594_v1.1.11 分别进入这两个目录的server目录下，执行所有模块同步到外网中心服模板机器【注意：热更配置一定要全部更新，因为外网新服启动不会加载配置】 # cd /data/game/android_main_55594_v1.1.11/server # make release_android # ./scripts/unix/sync_file -u root -h 119.29.73.196 -s androids0 -a # cd /data/game/ios_main_55594_v1.1.11/server # make release_ios # ./scripts/unix/sync_file -u root -h 119.29.73.196 -s ioss0 -a 打开外网后台 http://119.29.73.196/web/admin/index.php 进入服务器管理。勾选【页面右上角】所有机器（除去中心后台机），点击同步代码 勾选所有要热更的服务器，点击【页面正上方】同步代码，然后将要热更的配置填入【热更配置：】文本框中，点击提交 Tips：svn status 和 svn diff 可以帮助确认当前环境的svn状态，避免误写等异常事情 ​ 3. 开通新服以下面新服为例： 打开外网后台 http://119.29.73.196/web/admin/index.php 进入服务器管理，点击添加服务器 参考最接近的服务器2065，进行配置 关于选择几区：每20一区，因此66落在4区 红框为特别注意的地方，IP部分参考前者复制粘贴 配好保存以后，点击页面正上方【开通新服】，点击页面正上方【清档】 在实际开服的当天点击【启动服务器】，成功以后，切换服务器运行状态、是否推荐、对外可见 注意：一定要开服当天才能第一次启动服务器，不然会有脏数据生成！如果没有在开服当天就启动服务器了，注意清除mongodb的该数据库内容 4. 更新36、38服 36服：线上内容验证服。和外网正在跑的版本一致 38服：周更新内容验证服。是即将上线的版本，在外网的验证服 以v1.1.11为例，用android_main_55594_v1.1.11更新38服： 进入66的发版目录，若目录android_main_55594_v1.1.11不存在，进行以下操作： A.check out分支代码 # cd /data/game # mkdir android_main_55594_v1.1.11 # cd android_main_55594_v1.1.11 # checksvn.sh branches/mix/important/android_release_20180425_55594_v1.1.11 B.复制server.config保证顺利编译 # cd /data/game/android_main_55594_v1.1.11/server # cp /data/dsgl_new/server/system_config/server.config ./system_config/server.config 进入目录，执行编译，并同步至38服 # cd /data/game/android_main_55594_v1.1.11/server # make debug # ./scripts/unix/sync_file -u root -h 139.199.187.235 -s DSGLs38 -a 进入到139.199.187.235，进行相关操作（加载代码/加载配置/关服/开服等） 开服/关服 cd /data/game/DSGL_s38/scripts/unix./s start./s stop 加载代码/配置&lt;加载10000分钟以内的模块/加载全部配置&gt; cd /data/game/DSGL_s38/scripts/unix./scripts/unix/s attach xxx common_update:reload_mod_modified(common, 10000).common_config:load_all(true). ​ 5. IOS提审（专门用于IOS审核，不对玩家开放） 在中心后台选择一个空闲的低于50的server_id，如27，进行添加服务器的配置，模板参考20。（一定要配，不然没有充值回调！！！）其中游戏端口填20037，后台端口填9037（即以20010和9010为基数，加上server_id得出结果）其他依葫芦画瓢： 根据要用的版本，去到66的发版目录/data/game下，选择IOS版本相应的目录。 # cd /data/game/ios_main_55947_v1.1.12/server # make release_ios laolisdk使用make release # ./scripts/unix/sync_file -u root -h 39.108.192.101 -s IOSs27 -a ​ 进入39.108.192.101的对应服务器目录下， 拷贝其他服的server.config到本服，然后进行相应替换。 # cd /data/game/IOS_s27 # cp ../IOS_s20/system_config/server.config ./system_config/ # vim system_config/server.config % 修改以下字段值，注意和第一步配置的相匹配 &gt; {server_no, 27}. &gt; {serverid,[27]}. &gt; {line_start_port, 20037}. &gt; {web_port, 9037}. &gt; {mongo_config, {&quot;localhost&quot;, 27017, &quot;dsgl27&quot;, &quot;dsgl&quot;, &quot;123456&quot;}}. # ./scripts/unix/s init_db # ./scripts/unix/s start % 将审核用的配置拷贝到本地，attach到游戏服以后，进行这三个表的加载 # cp -f ~/check_ios_config/v1.1.10/* ./config/iOS/ # ./scripts/unix/s attach xxx % 这三个表影响审核的一些信息，如果有结构改变就需要调整。 &gt;common_config:load(&apos;RechargeActivity&apos;),common_config:load(&apos;RechargeList&apos;),common_config:load(&apos;PushRules&apos;). % 修改服务器列表 # cd /data/web_sy/web/api/ # cp server_list_ios20.php server_list_ios27.php # vim server_list_ios27.php % 修改其中的server_id为27、game_port为20037端口号 &gt;&apos;server_id&apos; =&gt; &quot;27&quot; &gt;&apos;game_port&apos; =&gt; 20037 % 地址 http://zhuyougame.com/web/api/server_list_ios27.php 【仅针对米壳】修改后台文件pay_mike.php，将炳鸿给的subgameid和pay_key照样拷贝，然后提交到svn更新出去（web_sy更新见下方操作）。【其他平台】自行判断充值是否成功。 % 登陆66 # cd /data/web_sy/ # svn up # ./sync_file -h 119.29.73.196 ​ 6. 内网测试服维护 进入66 方式一 cd /data/dsgl_new/servermake all./scripts/unix/s attach xx common_config:load_all(true). 方式二 cd /data/dsgl_new/servermake debug 如果上述过程中有报错，则排查问题。如果没有报错，但是log有异常，则重启，重启还有问题就清档 # ./s drop_mongo ​ 7. 导入外网玩家数据 在192.168.1.6上（内网测试机器2） # cd /home/game/db_backup 注意命名格式，dsgl_SERVERID _ 年 _ 月 _ 日 # scp -r root@119.29.245.80:/data/DbBackup/2018_05_02/dsgl2001/ ./dsgl_2001_2018_5_2 # mongorestore -d dsl_2001 --dir=./dsgl_2001_2018_5_2/04_40.mongo/dsgl_2001/ 前提是存在可用的游戏服，修改对应服的server.config： server_no，serverid：为该服的server_id，及数据库导向 {server_no, 2001}. {serverid, [2001]}. {mongo_config,{&quot;192.168.1.6&quot;,27017,&quot;dsgl_2001&quot;,&quot;mongouser&quot;,&quot;8f10bb0e5bfb2743&quot;}}. 登陆数据库，修改服务器列表： # mysql -u root -h 192.168.1.44 -pminmin &gt; use dsgl_center; &gt; update all_server_info set server_id = 2001 where server_id = xx;（xx是可用游戏服的server_id） ​ 8. 玩法中心服 前提是这两个服都能作为游戏服正常启动 修改玩法中心服server.config： {center_for_activity, true}. 修改游戏服使center_server_host和玩法中心服一致&lt;分别对应中心服的server.config的IP和端口&gt;： {center_server_host, {&quot;192.168.1.40&quot;,20001}}. {open_for_cross, true}. 注：win下启动中心服脚本使用scripts/win/center_server.bat，linux下启动查看scripts/unix/s","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://yoursite.com/categories/Uncategorized/"}],"tags":[]}]}